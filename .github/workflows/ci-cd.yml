name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the workflow when there's a push to the main branch

jobs:
  # Job for building and pushing the Docker image
  build_and_push:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Step 2: Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Login to Docker Hub using GitHub secrets
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username from GitHub Secrets
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password/token from GitHub Secrets

    # Step 4: Build the Docker image using the commit SHA as the tag
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:$GITHUB_SHA .  # Use the commit SHA as the version tag

    # Step 5: Push the Docker image to Docker Hub (both tagged by commit SHA and latest)
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/my-app:$GITHUB_SHA
        docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest  # Always push the latest tag

  # Job for deploying the Docker image to EC2
  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: build_and_push  # This job will only run after the build_and_push job is successful

    steps:
    # Step 1: Checkout the code (in case you need it for further operations)
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up SSH key to connect to the EC2 instance
    - name: Setup SSH key
      run: |
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem  # Store private key
        chmod 600 private_key.pem  # Set correct file permissions for the private key
    
    # Step 3: SSH into the EC2 instance and deploy the Docker image
    - name: SSH into EC2 and deploy
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          # Stop and remove the old Docker container
          docker ps -q --filter "name=my-app" | xargs -r docker stop
          docker ps -a -q --filter "name=my-app" | xargs -r docker rm

          # Pull the new Docker image from Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:latest

          # Run the new Docker container with the pulled image
          docker run -d -p 8080:80 ${{ secrets.DOCKER_USERNAME }}/my-app:latest

          # Optional: Clean up old Docker images to free up space
          docker image prune -f
        EOF

    # Step 4: Clean up the private SSH key
    - name: Clean up SSH key
      run: rm -f private_key.pem  # Remove the private key after use
